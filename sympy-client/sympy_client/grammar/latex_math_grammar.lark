// Terminals are loosley based on sympy's original latex.lark: https://github.com/sympy/sympy/blob/2e7baea39cd0d891433bdc2ef2222e445c381ca3/sympy/parsing/latex/lark/grammar/latex.lark
// grammar has been written from the ground up to support the faster lalr parser instead of earley.

// ======== Core structure ========

?latex_string: relation | system_of_relations | proposition_chain

_rel_op: EQUAL | NOT_EQUAL | LT | LTE | GT | GTE
_align: _ALIGN | _LATEX_NEWLINE
relation: (_align* _rel_op)? expression (_rel_op expression)* (_rel_op _align*)?

// an expression is a sum of terms
expression: (_align* (ADD|SUB))? term ((ADD|SUB) term)*

// a term is a series of products of factors separated by product operators.
term: implicit_multiplication ((OPERATOR_MUL|OPERATOR_DIV) (_align* (ADD|SUB))? implicit_multiplication)*

// factors with no operator between them are implicitly multiplied together.
?implicit_multiplication: _align* factor (_align* factor)* _align*

// a factor is either a number, a constant, a symbol, or a function.
// here exponentiation, fractions, binomials are loosly seen as functions.
?factor: exponentiation_ext
    | factor_func_arg
    | unit
    | function_noarg

// matches all factors which may be passed to a mathematical function (excluding postfix functions) as an argument
?factor_func_arg: factor_func_postfix_arg
    | _delimitedfactor

// matches all factors which may be passed to a post fix mathematical function (factorial, percent, ...) WHICH may be passed to another mathematical function as an argument.
// e.g. \sin x! this rule should match x, since x is an allowed arg in x! and x! is an allowed arg to \sin x!.
// should not match (x) in e.g. \sin(x)! since (x)! is not passable as an arg to \sin.
// this should instead be interpreted as (\sin(x))!, which another rule will take care of.
?factor_func_postfix_arg: exponentiation_arg
    | basefactor_arg

// matches all base factors in an exponentiation, which may be passed to a mathematical function as an argument.
?basefactor_arg: substitute_symbol
    | function_as_arg
    | _number
    | _matrix_notation

// various rules for grouping expressions surrounded by delimiters.
_delimitedfactor: parenthesees_expression | brackets_expression | braces_expression

?parenthesees_expression: _L_PAREN expression _R_PAREN
?braces_expression: _L_BRACE expression _R_BRACE
?brackets_expression: _L_BRACKET expression _R_BRACKET

// groups a base factor and an exponent factor to be evaluated in an exponentation.
// this variant matches only exponentiations which may be used as arguments to functions.
// e.g. it should match x^2 in \sin x^2 but not (x + y)^2 in \sin(x+ y)^2
//
// exponentiation_arg combined with exponentiation_ext should match all exponentiations possible. 
exponentiation_arg: basefactor_arg _CARET function_special_arg -> exponentiation
    | basefactor_arg _CARET (ADJOINT_TRANSPOSE_EXPONENT|ADJOINT_TRANSPOSE_EXPONENTS) -> exp_transpose

?exponentiation_ext: (unit|_delimitedfactor|function_noarg) _CARET function_special_arg -> exponentiation
    | (unit|_delimitedfactor|function_noarg) _CARET (ADJOINT_TRANSPOSE_EXPONENT|ADJOINT_TRANSPOSE_EXPONENTS) -> exp_transpose

// ======== Symbols ========

substitute_symbol: symbol
symbol: indexed_symbol | _non_indexed_symbol

single_letter_symbol: SINGLE_LETTER_SYMBOL -> symbol
multi_letter_symbol: MULTI_LETTER_SYMBOL -> symbol

// a formatted symbol is any symbol surrounded with a latex command which changes it visually.
// this could for example be \mathit
formatted_symbol: CMD_FORMAT brace_surrounded_text [PRIMES]
_non_indexed_symbol: single_letter_symbol | multi_letter_symbol | formatted_symbol

indexed_symbol: _non_indexed_symbol _UNDERSCORE (single_letter_symbol | _digit | brace_surrounded_text) [PRIMES]

// all the rules here should return the NAME (as in a str) of the symbol to be created
// the symbol rule is responsible for eactually creating the symbol and optionally substituting its value.

// this rule optionally tries to create a unit, instead of a symbol, if bunits are used.
// otherwise this is the same as the symbol rule.
unit: _L_BRACE _non_indexed_symbol _R_BRACE

// ======== Numbers ========

// groups any value which evaluates to a number.
_number: _numeric_number | _digit
// groups any value which evaluates to a number, and can be passed as an argument, without surrounding it with braces.
// it may be a bit counter intuitive, but here pi (and other constants) are essentially seen as a "_digit".
_digit: _numeric_digit | _constant

_constant: CONST_PI | CONST_EULER | CONST_IMAGINARY | CONST_INFINITY

_numeric_digit: NUMERIC_DIGIT
_numeric_number: HEXADECIMAL_NUMBER | BASE_10_NUMBER | OCTAL_NUMBER | BINARY_NUMBER

// ======== Functions ========

undefined_function: UNDEFINED_FUNC_START list_of_expressions _R_PAREN

// groups all functions whic cannot be used as an argument to other functions.
// to pass this type of function, delimit them so they are matched by the _delimited_factor rule.
?function_noarg: _postfix_function

// groups all functions which can be used as arguments to other functions without needing to be delimited.
?function_as_arg: _delimited_function
    | named_function
    | _series_function
    | integral
    | sqrt
    | conjugate
    | frac
    | binom
    | derivative
    | _postfix_function_arg

?named_function: undefined_function
    | trig_function
    | _log
    | exponential
    | limit
    | real_part | imaginary_part | argument | sign
    | upper_gamma | lower_gamma
    | _filter_functions
    | _matrix_functions
    | _combinatorial_functions
    | _divisibility_functions

// matches a special kind of argument, defined by the fact that fractions and binomials can be passed without surrounding them with braces.
substitute_single_letter_symbol: single_letter_symbol -> substitute_symbol
?function_special_arg: braces_expression | parenthesees_expression | named_function | _delimited_function | frac | binom | substitute_single_letter_symbol | _digit


// named functions

_func_template{func_name}: func_name [_CARET function_special_arg] factor_func_arg

// trigonometric functions

trig_function: _func_template{FUNC_SIN}
    | _func_template{FUNC_COS}
    | _func_template{FUNC_TAN}
    | _func_template{FUNC_CSC}
    | _func_template{FUNC_SEC}
    | _func_template{FUNC_COT}
    | _func_template{FUNC_ASIN}
    | _func_template{FUNC_ACOS}
    | _func_template{FUNC_ATAN}
    | _func_template{FUNC_ACSC}
    | _func_template{FUNC_ASEC}
    | _func_template{FUNC_ACOT}
    | _func_template{FUNC_SINH}
    | _func_template{FUNC_COSH}
    | _func_template{FUNC_CSCH}
    | _func_template{FUNC_SECH}
    | _func_template{FUNC_COTH}
    | _func_template{FUNC_TANH}
    | _func_template{FUNC_ASINH}
    | _func_template{FUNC_ACOSH}
    | _func_template{FUNC_ATANH}
    | _func_template{FUNC_ACSCH}
    | _func_template{FUNC_ASECH}
    | _func_template{FUNC_ACOTH}

_log: log_implicit_base
    | log_explicit_base

log_implicit_base: _func_template{FUNC_LOG}
    | _func_template{FUNC_LN}
    | _func_template{FUNC_LG}

log_explicit_base: FUNC_LOG _UNDERSCORE function_special_arg [_CARET function_special_arg] factor_func_arg
    | FUNC_LOG _CARET function_special_arg _UNDERSCORE function_special_arg factor_func_arg -> log_explicit_base_exponent_first

real_part: _func_template{_FUNC_RE}
imaginary_part: _func_template{_FUNC_IM}
argument: _func_template{_FUNC_ARG}
sign: _func_template{_FUNC_SGN}

exponential: _func_template{_FUNC_EXP}


upper_gamma: _FUNC_UPPER_GAMMA expression (_COMMA expression)? _R_PAREN
lower_gamma: _FUNC_LOWER_GAMMA expression _COMMA expression _R_PAREN


limit_direction: _L_BRACE (ADD|SUB) _R_BRACE
    | ADD
    | SUB

_lim_approach_symbol: _PROP_OP_LR_IMPLICATION
limit: _FUNC_LIMIT _UNDERSCORE _L_BRACE symbol _lim_approach_symbol basefactor_arg [_CARET limit_direction] _R_BRACE factor_func_arg

_series_template_start_iter_first{series_name}: series_name _UNDERSCORE _L_BRACE symbol EQUAL expression _R_BRACE _CARET function_special_arg factor_func_arg
_series_template_end_iter_first{series_name}: series_name _CARET function_special_arg _UNDERSCORE _L_BRACE symbol EQUAL expression _R_BRACE factor_func_arg

_series_function: sum | product

sum: _series_template_start_iter_first{_FUNC_SUM} -> sum_start_iter_first
    | _series_template_end_iter_first{_FUNC_SUM} -> sum_end_iter_first


product: _series_template_start_iter_first{_FUNC_PRODUCT} -> product_start_iter_first
    | _series_template_end_iter_first{_FUNC_PRODUCT} -> product_end_iter_first
    
// filter functions

_filter_functions: min | max

list_of_expressions: expression (_COMMA expression)*

min: _FUNC_MIN _L_PAREN list_of_expressions _R_PAREN
max: _FUNC_MAX _L_PAREN list_of_expressions _R_PAREN

// delimited functions
_delimited_function: abs | norm | inner_product | floor | ceil

%declare _INNER_PRODUCT_SEPARATOR
inner_product: _L_ANGLE expression _INNER_PRODUCT_SEPARATOR expression _R_ANGLE
abs: _L_BAR expression _R_BAR
norm: _L_DOUBLE_BAR expression _R_DOUBLE_BAR
floor: _L_FLOOR expression _R_FLOOR
ceil: _L_CEIL expression _R_CEIL
sqrt: _FUNC_SQRT [brackets_expression] (braces_expression|single_letter_symbol|_digit)
conjugate: _FUNC_CONJUGATE (braces_expression|single_letter_symbol|_digit)

// match a single argument in a list of latex style arguments (that is \command{arg1}{arg2}...{argN})
_multiarg_func_arg: (braces_expression|single_letter_symbol|_digit)
// terminals signifying the delimiters and end of multiple arguments in a latex style argument list.
// due to lalr's limited lookahead, a custom post lexer needs to insert this token when parsing.
%declare _MULTIARG_DELIMITER
%declare _MULTIARG_EOS

// postfix functions

_postfix_function: factorial | percent | permille | derivative_prime | modulo

// postfix functions can generally not be passed as an argument to other mathematical functions,
// e.g. \sin(x)!, where (x)! would be the postfix function call.
// if this was allowed, then \sin(x)! would be interpreted as \sin((x)!), but from a human reader perspective,
// this is unexpected, and interpreting it as (\sin(x))! is more natural.
//
// Omitting these parenthesees changes this perception though,
// as e.g. \sin x! is more likely to be interpreted as \sin((x)!)
//
// Therefore, some postfix functions may have an additional rule, postfixed with _func_arg,
// which matches all cases of the postfix function such that it can be passed as an argument to another function.
//
// all of these rules are grouped together in _postfix_function_arg
_postfix_function_arg: factorial_func_arg | percent_func_arg | permille_func_arg | derivative_prime_func_arg

factorial: _delimitedfactor _BANG
factorial_func_arg: factor_func_postfix_arg _BANG -> factorial

percent: factor_func_arg _PERCENT
percent_func_arg: factor_func_postfix_arg _PERCENT -> percent
permille: factor_func_arg _PERMILLE
permille_func_arg: factor_func_postfix_arg _PERMILLE -> permille
derivative_prime: factor_func_arg PRIMES
derivative_prime_func_arg: factor_func_postfix_arg PRIMES -> derivative_prime

modulo: factor_func_arg _FUNC_MOD factor_func_arg

// core functions
frac: _FUNC_FRAC _multiarg_func_arg _MULTIARG_DELIMITER _multiarg_func_arg _MULTIARG_EOS
binom: _FUNC_BINOM _multiarg_func_arg _MULTIARG_DELIMITER _multiarg_func_arg _MULTIARG_EOS

diff_symbol_exponent: symbol [_CARET function_special_arg]
diff_symbol_arg_list: (_DIFFERENTIAL_SYMBOL diff_symbol_exponent)+

_DERIV_ARG_SEPARATOR.-1: _L_BRACE
// need to have a post lex which recognises _FUNC_DERIVATIVE and then replaces any single letter symbol which matches _DIFFERENTIAL_SYMBOL with _DIFFERENTIAL_SYMBOL
derivative: _FUNC_DERIVATIVE expression _R_BRACE _DERIV_ARG_SEPARATOR diff_symbol_arg_list _R_BRACE -> derivative_func_first
    |   _FUNC_DERIVATIVE _R_BRACE _DERIV_ARG_SEPARATOR diff_symbol_arg_list _R_BRACE factor_func_arg -> derivative_symbols_first

integral: _FUNC_INTEGRAL [expression] _DIFFERENTIAL_SYMBOL symbol -> integral_no_bounds
    | _FUNC_INTEGRAL _UNDERSCORE function_special_arg _CARET function_special_arg [expression] _DIFFERENTIAL_SYMBOL symbol -> integral_lower_bound_first
    | _FUNC_INTEGRAL _CARET function_special_arg _UNDERSCORE function_special_arg [expression] _DIFFERENTIAL_SYMBOL symbol -> integral_upper_bound_first

// ======== Matrices ========

// det_matrix is differentiated from the other matrices, as this one evaluates to the determinant value, which is a scalar and not a matrix.
// TODO: different name for these?
_matrix_notation: _matrix_type | det_matrix
_matrix_type: matrix | array_matrix

matrix_row_delim: MATRIX_ROW_DELIM -> matrix_like_delim
matrix_body: matrix_row_delim? expression ((_MATRIX_COL_DELIM|matrix_row_delim) expression)* matrix_row_delim?
matrix: CMD_BEGIN_MATRIX matrix_body CMD_END_MATRIX _MATRIX_ENV_END
array_matrix: CMD_BEGIN_ARRAY ARRAY_ENV_OPTIONS matrix_body CMD_END_ARRAY _MATRIX_ENV_END
det_matrix: CMD_BEGIN_VMATRIX matrix_body CMD_END_VMATRIX _MATRIX_ENV_END

// ======== Matrices functions ========

_matrix_functions: determinant | trace | adjugate | rref | gradient | hessian | jacobian

determinant: _func_template{_FUNC_MATRIX_DETERMINANT}
trace: _func_template{_FUNC_MATRIX_TRACE}
adjugate: _func_template{_FUNC_MATRIX_ADJUGATE}
rref: _func_template{_FUNC_MATRIX_RREF}

gradient: _func_template{_FUNC_GRADIENT}
hessian: _func_template{_FUNC_HESSIAN}
jacobian: _func_template{_FUNC_JACOBIAN}

// ======== Combinatorial functions ========

_combinatorial_functions: permutations | combinations | derangements

permutations: _FUNC_PERMUTATIONS expression _COMMA expression _R_PAREN
    | _L_BRACE (_CARET|_UNDERSCORE) expression _CMD_PERMUTATIONS _UNDERSCORE expression _R_BRACE
combinations: _FUNC_COMBINATIONS expression _COMMA expression _R_PAREN
    | _L_BRACE (_CARET|_UNDERSCORE) expression _CMD_COMBINATIONS _UNDERSCORE expression _R_BRACE
derangements: _FUNC_DERANGEMENTS expression _R_PAREN
    | _L_BRACE _BANG expression _R_BRACE

// ======== Divisibility functions ========

_divisibility_functions: gcd | lcm 

gcd: _FUNC_GCD _L_PAREN expression _COMMA expression _R_PAREN
lcm: _FUNC_LCM _L_PAREN expression _COMMA expression _R_PAREN

// ======== System of relations ========

%declare _EXPR_DELIM
system_of_relations_expr: relation
system_of_relations_delim: _EXPR_DELIM -> matrix_like_delim
_system_of_relations_body: system_of_relations_delim? system_of_relations_expr (system_of_relations_delim system_of_relations_expr)* system_of_relations_delim?
system_of_relations: _CMD_BEGIN_ALIGN _system_of_relations_body _CMD_END_ALIGN
    | _CMD_BEGIN_CASES _system_of_relations_body _CMD_END_CASES

// ======== Miscellaneous rules ========

// TODO: i dont see a reason why this priority should change anything, but it does so its here now.
NON_BRACE_TEXT.-1: /[^{}]+/
!brace_surrounded_text: _L_BRACE NON_BRACE_TEXT? (brace_surrounded_text NON_BRACE_TEXT?)*  _R_BRACE

// ======== Propositional Logic Structure

// represents a chain of propositions, separated by equivalence symbols
proposition_chain: _proposition | (_proposition|relation) (_PROP_OP_EQUIV (_proposition|relation))+

// represents a single proposition in a series of chained propositions
_proposition: _prop_bool_value | _delimited_proposition | prop_not | prop_xnor | prop_xor | prop_nor | prop_and | prop_nand | prop_or | prop_implies | prop_iff
// represents a single proposition surrounded by parenthesess, brackets or braces.
_delimited_proposition: _L_PAREN _proposition _R_PAREN | _L_BRACKET _proposition _R_BRACKET | _L_BRACE _proposition _R_BRACE

// propositional operator presedence is based on wolfram alpha: https://www.wolframalpha.com/input?i=not+A+xor+B+nor++C+and+D+nand+E+or+F+implies+G+%3C%3D%3E+H

prop_iff: prop_iff_arg (_PROP_OP_BIIMPLICATION prop_iff_arg)+
?prop_iff_arg: prop_implies_arg | prop_implies

!prop_implies: prop_implies_arg ((_PROP_OP_LR_IMPLICATION|_PROP_OP_RL_IMPLICATION) prop_implies_arg)+
?prop_implies_arg: prop_or_arg | prop_or

prop_or: prop_or_arg (_PROP_OP_OR prop_or_arg)+
?prop_or_arg: prop_nand_arg | prop_nand

prop_nand: prop_nand_arg (_PROP_OP_NAND prop_nand_arg)+
?prop_nand_arg: prop_and_arg | prop_and

prop_and: prop_and_arg (_PROP_OP_AND prop_and_arg)+
?prop_and_arg: prop_nor_arg | prop_nor

prop_nor: prop_nor_arg (_PROP_OP_NOR prop_nor_arg)+
?prop_nor_arg: prop_xor_arg | prop_xor

prop_xor: prop_xor_arg (_PROP_OP_XOR prop_xor_arg)+
?prop_xor_arg: prop_xnor_arg | prop_xnor

prop_xnor: prop_xnor_arg (_PROP_OP_XNOR prop_xnor_arg)+
?prop_xnor_arg: prop_not_arg | prop_not

prop_not: _PROP_OP_NOT prop_not_arg
?prop_not_arg: _delimited_proposition | relation | _prop_bool_value

_prop_bool_value: CMD_TAUTOLOGY | CMD_CONTRADICTION

// ================ Terminals ================

// ignore escaped whitespace in latex code
%ignore /(?<!\\)\\ /

_WS: /[\s\t\n\r]+/
%ignore _WS

%ignore "\\," | "\\thinspace" | "\\:" | "\\medspace" | "\\;" | "\\thickspace"
%ignore "\\quad" | "\\qquad"
%ignore "\\!" | "\\negthinspace" | "\\negmedspace" | "\\negthickspace"
%ignore "\\vrule" | "\\vcenter" | "\\vbox" | "\\vskip" | "\\vspace" | "\\hfill"
%ignore "\\*" | "\\-" | "\\." | "\\/" | "\\(" | "\\=" | "\\middle"

_LR_FORMAT: "\\left" | "\\right"
%ignore _LR_FORMAT
%ignore "\\limits" | "\\nolimits"
%ignore "\\displaystyle"

// basic binary operators
ADD: "+"
SUB: "-"
MUL: "*"
DIV: "/" | "\\over"

// basic common operators
_CMD_TIMES: "\\times"
_CMD_CDOT:  "\\cdot"
_CMD_DIV:   "\\div"
_CMD_BAR: "\\bar"
_CMD_OVERLINE: "\\overline"
_CMD_INNER_PRODUCT_SEPARATOR: _BAR | _COMMA

// tokens with distinct left and right symbols
_L_ANGLE: "\\langle" | "<"
_R_ANGLE: "\\rangle" | ">"
_L_BRACE: "{"
_R_BRACE: "}"
L_BRACE_LITERAL: "\\{"
R_BRACE_LITERAL: "\\}"
_L_BRACKET: "["
_R_BRACKET: "]"
_L_CEIL: "\\lceil"
_R_CEIL: "\\rceil"
_L_FLOOR: "\\lfloor"
_R_FLOOR: "\\rfloor"
_L_PAREN: "("
_R_PAREN: ")"
_L_BAR: _BAR
%declare _R_BAR
_L_DOUBLE_BAR: _DOUBLE_BAR
%declare _R_DOUBLE_BAR

_L_DELIMITER: _DOT | _L_ANGLE | L_BRACE_LITERAL | _L_BRACKET | _L_CEIL | _L_FLOOR | _L_PAREN
_R_DELIMITER: _DOT | _R_ANGLE | R_BRACE_LITERAL | _R_BRACKET | _R_CEIL | _R_FLOOR | _R_PAREN

// limit, integral, sum, and product symbols
_FUNC_LIMIT:  "\\lim"
_FUNC_INTEGRAL:  "\\int" | "\\intop"
_FUNC_SUM:  "\\sum"
_FUNC_PRODUCT: "\\prod"

// common functions
_FUNC_EXP:  "\\exp"
FUNC_LOG:  "\\log"
FUNC_LN:   "\\ln"
FUNC_LG:   "\\lg"
_FUNC_MIN: "\\min"
_FUNC_MAX: "\\max"
_FUNC_CONJUGATE: _CMD_OVERLINE | _CMD_BAR
_FUNC_RE: "\\Re" | CMD_OPERATOR _WS? _L_BRACE _WS? "Re" _WS? _R_BRACE
_FUNC_IM: "\\Im" | CMD_OPERATOR _WS? _L_BRACE _WS? "Im" _WS? _R_BRACE
_FUNC_ARG: "\\arg"
_FUNC_SGN: CMD_OPERATOR _WS? _L_BRACE _WS? "sgn" _WS? _R_BRACE

// multiarg functions

_FUNC_FRAC: /\\[dtcs]?frac/ | "\\nicefrac"
_FUNC_BINOM: /\\[dt]?binom/

_FUNC_DERIVATIVE: _FUNC_FRAC _WS? _L_BRACE _WS? _DIFFERENTIAL_SYMBOL

_FUNC_OVERLINE: "\\overline"

// trigonometric functions
FUNC_SIN:  "\\sin"
FUNC_COS:  "\\cos"
FUNC_TAN:  "\\tan"
FUNC_CSC:  "\\csc"
FUNC_SEC:  "\\sec"
FUNC_COT:  "\\cot"

// inverse trigonometric functions
FUNC_ASIN: "\\arcsin"
FUNC_ACOS: "\\arccos"
FUNC_ATAN: "\\arctan"
FUNC_ACSC: CMD_OPERATOR _WS? _L_BRACE _WS? "arccsc" _WS? _R_BRACE
FUNC_ASEC: CMD_OPERATOR _WS? _L_BRACE _WS? "arcsec" _WS? _R_BRACE
FUNC_ACOT: CMD_OPERATOR _WS? _L_BRACE _WS? "arccot" _WS? _R_BRACE

// hyperbolic trigonometric functions
FUNC_SINH: "\\sinh"
FUNC_COSH: "\\cosh"
FUNC_TANH: "\\tanh"
FUNC_CSCH: CMD_OPERATOR _WS? _L_BRACE _WS? "csch" _WS? _R_BRACE
FUNC_SECH: CMD_OPERATOR _WS? _L_BRACE _WS? "sech" _WS? _R_BRACE
FUNC_COTH: "\\coth"
FUNC_ASINH: CMD_OPERATOR _WS? _L_BRACE _WS? "arsinh" _WS? _R_BRACE
FUNC_ACOSH: CMD_OPERATOR _WS? _L_BRACE _WS? "arcosh" _WS? _R_BRACE
FUNC_ATANH: CMD_OPERATOR _WS? _L_BRACE _WS? "artanh" _WS? _R_BRACE
FUNC_ACSCH: CMD_OPERATOR _WS? _L_BRACE _WS? "arcsch" _WS? _R_BRACE
FUNC_ASECH: CMD_OPERATOR _WS? _L_BRACE _WS? "arsech" _WS? _R_BRACE
FUNC_ACOTH: CMD_OPERATOR _WS? _L_BRACE _WS? "arcoth" _WS? _R_BRACE

_FUNC_SQRT: "\\sqrt"
_FUNC_UPPER_GAMMA.1: "\\Gamma" _LR_FORMAT? _L_PAREN
_FUNC_LOWER_GAMMA.1: "\\gamma" _LR_FORMAT? _L_PAREN

// matrix functions

_FUNC_MATRIX_DETERMINANT: "\\det"
_FUNC_MATRIX_TRACE: CMD_OPERATOR _WS? _L_BRACE _WS? "trace" _WS? _R_BRACE
_FUNC_MATRIX_ADJUGATE: CMD_OPERATOR _WS? _L_BRACE _WS? "adjugate" _WS? _R_BRACE
_FUNC_MATRIX_RREF: CMD_OPERATOR _WS? _L_BRACE _WS? "rref" _WS? _R_BRACE

// linear alg functions.

_FUNC_GRADIENT: "\\nabla"
_FUNC_HESSIAN: CMD_MATRIX_FORMAT _WS? _L_BRACE _WS? "H" _WS? _R_BRACE
_FUNC_JACOBIAN: CMD_MATRIX_FORMAT _WS? _L_BRACE _WS? "J" _WS? _R_BRACE

// combinatorial functions.

// all combinatorial functions should have to be called with their arguments wrapped in parenthesees,
// therefore they are defined a bit differently here.

_CMD_PERMUTATIONS.1: "P"
_CMD_COMBINATIONS.1: "C"
_CMD_DERANGEMENTS.1: "D"

_FUNC_PERMUTATIONS.1: _CMD_PERMUTATIONS _LR_FORMAT? _L_PAREN
_FUNC_COMBINATIONS.1: _CMD_COMBINATIONS _LR_FORMAT? _L_PAREN
_FUNC_DERANGEMENTS.1: _CMD_DERANGEMENTS _LR_FORMAT? _L_PAREN

// divisibility functions.

_FUNC_GCD: "\\gcd"
_FUNC_LCM: CMD_OPERATOR _WS? _L_BRACE _WS? "lcm" _WS? _R_BRACE
_FUNC_MOD: "\\mod"

// TODO: use a bit more elaborate regex here, so more complex strings are allowed in the index.
UNDEFINED_FUNC_START: (SINGLE_LETTER_SYMBOL|MULTI_LETTER_SYMBOL) (_WS? _UNDERSCORE _WS? _L_BRACE /\s*[^{}]+\s*/ _R_BRACE)? _LR_FORMAT? _L_PAREN

// mathematical constants
CONST_PI: "\\pi"
CONST_EULER: "e"
CONST_IMAGINARY: "i"
CONST_INFINITY: "\\infty"

CMD_MATH: /\\math\w+/
CMD_BOLD_FORMAT: "\\pmb"

CMD_FORMAT: CMD_MATH | CMD_BOLD_FORMAT

// mathrm is also included here so operatorname does not have to be used everywhere.
CMD_OPERATOR: "\\operatorname" | "\\mathrm"
CMD_MATRIX_FORMAT: "\\mathbf"

_BANG: "!"
_BAR: "|" | "\\mid"
_DOUBLE_BAR: "||" | /\\mid\s*\\mid/ | /\\[lr]?Vert/
_DOT: "."
_CARET: "^"
_COMMA: ","
_UNDERSCORE: "_"
_PERCENT: "\\%"
_PERMILLE: "\\textperthousand"

// relational symbols
EQUAL: "="
NOT_EQUAL: "\\neq" | /\\ne(?!g)/ // do not match \neg as '\ne' followed by the symbol 'g'
LT: "<"
LTE: LT EQUAL | "\\leq" | "\\leqslant" | /\\le(?!ft)/ // do not match `\left` as `\le` followed by the symbol `ft`
GT: ">"
GTE: GT EQUAL | "\\geq" | "\\ge" | "\\geqslant"

OPERATOR_DIV: _CMD_DIV | DIV
OPERATOR_MUL: MUL | _CMD_TIMES | _CMD_CDOT

%import .greek_symbols.GREEK_SYMBOL

_PARTIAL_DIFFERENTIAL_SYMBOL: "\\partial"
_UPRIGHT_DIFFERENTIAL_SYMBOL: "\\text{d}" | "\\mathrm{d}"
// TODO: this priority should ideally not be here.
_DIFFERENTIAL_SYMBOL.-1: "d" | _UPRIGHT_DIFFERENTIAL_SYMBOL | _PARTIAL_DIFFERENTIAL_SYMBOL


LATIN_SYMBOL: /[a-zA-Z]/
LATIN_SYMBOL_WITH_PRIMTES: LATIN_SYMBOL PRIMES
MULTI_LETTER_LATIN_SYMBOL: /[a-zA-Z]{2,}'*/
GREEK_SYMBOL_WITH_PRIMES: GREEK_SYMBOL PRIMES

SINGLE_LETTER_SYMBOL: LATIN_SYMBOL | GREEK_SYMBOL

MULTI_LETTER_SYMBOL: LATIN_SYMBOL_WITH_PRIMTES | GREEK_SYMBOL_WITH_PRIMES | MULTI_LETTER_LATIN_SYMBOL

%import common.DIGIT -> NUMERIC_DIGIT

BINARY_NUMBER: /0(b|\\mathrm{b})[01]+/ | /\\mathrm{0b[01]+}/

OCTAL_NUMBER: /0(o|\\mathrm{o})[0-7]+/ | /\\mathrm{0o[0-7]+}/

HEXADECIMAL_NUMBER: /0[xX][\da-fA-F]+/ | /\\mathrm{0[xX][\da-fA-F]+}/

BASE_10_NUMBER: NUMERIC_DIGIT NUMERIC_DIGIT+ | NUMERIC_DIGIT* _DOT NUMERIC_DIGIT+

PRIMES: "'"+

ADJOINT_TRANSPOSE_EXPONENT: /(\\prime|\\ast|'|\*)/
ADJOINT_TRANSPOSE_EXPONENTS: /{(\\prime|\\ast|'|\*|\s)+}/

CMD_BEGIN: "\\begin" _WS? _L_BRACE
CMD_END: "\\end" _WS? _L_BRACE

// matrices

ARRAY_ENV: "array"
MATRIX_ENV: /([bp]?(?:small)?)matrix/
VMATRIX_ENV: /v(small)?matrix/

%declare _MATRIX_ENV_END

CMD_BEGIN_MATRIX: CMD_BEGIN _WS? MATRIX_ENV _WS? _R_BRACE
CMD_END_MATRIX: CMD_END _WS? MATRIX_ENV _WS? _R_BRACE

CMD_BEGIN_VMATRIX: CMD_BEGIN _WS? VMATRIX_ENV _WS? _R_BRACE
CMD_END_VMATRIX: CMD_END _WS? VMATRIX_ENV _WS? _R_BRACE

CMD_BEGIN_ARRAY: ("\\left" _WS? _L_DELIMITER)? _WS? CMD_BEGIN _WS? ARRAY_ENV _WS? _R_BRACE
ARRAY_ENV_OPTIONS: _L_BRACE (/[clr|:\s]+/)? _R_BRACE
CMD_END_ARRAY: CMD_END _WS? ARRAY_ENV _WS? _R_BRACE _WS? ("\\right" _WS? _R_DELIMITER)?

%declare _MATRIX_COL_DELIM
%declare MATRIX_ROW_DELIM

_ALIGN: "&"
_LATEX_NEWLINE: "\\\\"

// system of relations
_CMD_BEGIN_ALIGN: CMD_BEGIN _WS? "align" _WS? _R_BRACE
_CMD_BEGIN_CASES: CMD_BEGIN _WS? "cases" _WS? _R_BRACE
_CMD_END_ALIGN: CMD_END _WS? "align" _WS? _R_BRACE
_CMD_END_CASES: CMD_END _WS? "cases" _WS? _R_BRACE

// ======== propositional logic ========

CMD_TAUTOLOGY.1: /\\(?:mathrm|operatorname)\s*{\s*(?:T|True|TRUE)\s*}/
CMD_CONTRADICTION.1: /\\(?:mathrm|operatorname)\s*{\s*(?:F|False|FALSE)\s*}/

_PROP_OP_BIIMPLICATION: "\\iff" | /\\(?:[Ll]ongl|[Ll])eftrightarrow/ | /\\(?:leftright|rightleft)harpoons/
_PROP_OP_LR_IMPLICATION.1: "\\implies" | "\\to" | /\\(?:[Ll]ongr|[Rr])ightarrow/ // have to increase priority due to _LIM_APPROACH_SYMBOL
_PROP_OP_RL_IMPLICATION: /\\(?:[Ll]ongl|[Ll])eftarrow/
_PROP_OP_OR: "\\vee"
_PROP_OP_NAND: (_CMD_BAR|_CMD_OVERLINE) _WS? _PROP_OP_AND
_PROP_OP_AND: "\\wedge"
_PROP_OP_NOR: (_CMD_BAR|_CMD_OVERLINE) _WS? _PROP_OP_OR
_PROP_OP_XOR: "\\oplus"
_PROP_OP_XNOR: "\\odot"
_PROP_OP_NOT: "\\neg"

_PROP_OP_EQUIV: "\\equiv"
